// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       c if sel == 010
 *       d if sel == 011
 *       e if sel == 100
 *       f if sel == 101
 *       g if sel == 110
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=about);
    Mux16(a=c, b=d, sel=sel[0], out=cdout);
    Mux16(a=e, b=f, sel=sel[0], out=efout);
    Mux16(a=g, b=h, sel=sel[0], out=ghout);
    Mux4Way16(a=about, b=cdout, c=efout, d=ghout, sel=sel[1..2], out=out);

    // OLD SOLUTION
    // Why didn't I think of switching by one bit first?
    // The overlapping bits where always the problem...

    // Deal with 000, 001, 010, 011 first
    //        000  001  010  011
    // Mux4Way16(a=a, b=b, c=c, d=d, sel=sel[0..1], out=rightmost);
    // Deal with 100, 110, 101, 000.
    // Mux4Way16(a=f, b=h, c=e, d=g, sel=sel[1..2], out=leftmost);

    // Rightmost: A if x00 / B if x01 / C if x10 / D if x11
    // Leftmost: F if 00x / H if 01x / E if 10x / G if 11x
    // Now how this overlaps.
    // If 000, then rightmost A leftmost F
    // If 001, then rightmost B leftmost F
    // If 010, then rightmost C leftmost H
    // If 011, then rightmost D leftmost H
    // If 100, then rightmost A leftmost E
    // If 101, then rightmost D leftmost E
    // If 110, then rightmost C leftmost G
    // If 111, then rightmost D leftmost G

    // We need to adjust for  10x, which
    // should output F only if 101, if 100 then
    // output E
    // And(a=sel[0], b=sel[2], out=oneSomethingOne);
    // Not(in=sel[1], out=notMiddle);
    // And(a=oneSomethingOne, b=notMiddle, out=oneZeroOne);
    // Mux16(a=leftmost, b=f, sel=oneZeroOne, out=adjustFourOrFive);

    // We need to adjust for 11x, which needs to be H
    // if odd
    // And(a=oneSomethingOne, b=sel[1], out=oneOneOne);
    // Mux16(a=adjustFourOrFive, b=h, sel=oneOneOne, out=adjustSixOrSeven);

    // Mux16(a=rightmost, b=adjustSixOrSeven, sel=sel[2], out=out);
}
